--[[ColorfulFaces.anm

参考座標をもとに、三角形を描画します。
参考座標は、93さんの座標格納スクリプトを用いると便利です。



////説明////

alpha--透明度

fade--フェードを行う距離。

min--最小の三角形の三辺の平均。

max--最大の三角形の三辺の平均。

参考座標--参考にする座標。

単色化--それぞれ{単色化の強さ,輝度保持の有無,単色化パターン,set}です。
		単色化パターンは、
			0 単色化なし。
			1 おそらく規則的。
			2 ランダム。
			3 描画順に補間。setで次色までの描画数を決めれる。

color--単色化する際に使われる色。{0xff,0xbb,0xdd}のように指定してください。

colortest--なにもなし。ただあるだけ。

seed--単色化パターン2のときのseed値。


///////////////////////////////////////////////////
エラーやバグ報告はツイッターとかにお願いします。
https://twitter.com/metaphysicalba1
//////////////////////////////////////////////////

]]



--track0:alpha,0,100,0,0.01
--track1:fade,0,10000,0,0.01
--track2:min,0,10000,0,0.01
--track3:max,0,10000,200,0.01
--dialog:参考座標,local a=R_NEST("A");単色化,local iro={100,0,3,10};color,local ma={0xff,0xffff};colortest/col,local test=0xffffff;seed,local ransu=10;



--変数処理--
local fade=obj.track1
local count=1



--三角形を描画する関数--
local function sankaku(a_1,a_2,a_3)
local b_1=a_1*3+1
local b_2=a_2*3+1
local b_3=a_3*3+1
obj.effect()
obj.drawpoly(a[b_1],a[b_1+1],a[b_1+2],
		 a[b_2],a[b_2+1],a[b_2+2],
		 a[b_3],a[b_3+1],a[b_3+2],
		 a[b_3],a[b_3+1],a[b_3+2])
end



--透明度を決める関数--
local function set_alpha(d)
local alpha_1,alpha_2,alpha_3
if(d-obj.track2<fade)then
alpha_1=(d-obj.track2)/fade
else
alpha_1=1-obj.track0/100
end
if(obj.track3-d<fade)then
alpha_2=(obj.track3-d)/fade
else
alpha_2=1-obj.track0/100
end
alpha_3=1-obj.track0/100
obj.alpha=math.min(alpha_1,alpha_2,alpha_3)
end



--単色化の関数--
local function set_effect(i,j,f,count)

if(iro[3]==1)then
local kara=ma[count%#ma+1]
obj.effect("単色化","強さ",iro[1],"輝度を保持する",iro[2],"color",kara)
count=count+1

elseif(iro[3]==2)then
local minmin=obj.rand(0,#ma-1,ransu,count)
local kara=ma[minmin+1]
obj.effect("単色化","強さ",iro[1],"輝度を保持する",iro[2],"color",kara)
count=count+1

elseif(iro[3]==3)then
local i=math.floor(count/iro[4])
local r_1,g_1,b_1=RGB(ma[i%(#ma-1)+1])
local r_2,g_2,b_2=RGB(ma[i%(#ma-1)+2])
local kara=RGB(math.floor(r_1+(r_2-r_1)*(count)/iro[4]),math.floor(g_1+(g_2-g_1)*(count)/iro[4]),math.floor(b_1+(b_2-b_1)*(count)/iro[4]))
obj.effect("単色化","強さ",iro[1],"輝度を保持する",iro[2],"color",kara)
count=count+1

else
local minmin=nil
end

return count
end



--main--
local i,j,f,d_1,d_2,d_3,d
local saisyo=obj.track2
local saidai=obj.track3
for i=0,#a/3-1 do
if(i~=#a/3-1)then
for j=0+i,#a/3-1 do
if(j~=#a/3-1)then
for f=0+j,#a/3-1 do
	if(i==j or i==f or f==j)then
	d=saidai+1
	else
	d_1=((a[i*3+1]-a[j*3+1])^2+(a[i*3+2]-a[j*3+2])^2+(a[i*3+3]-a[j*3+3])^2)^0.5
	d_2=((a[i*3+1]-a[f*3+1])^2+(a[i*3+2]-a[f*3+2])^2+(a[i*3+3]-a[f*3+3])^2)^0.5
	d_3=((a[f*3+1]-a[j*3+1])^2+(a[f*3+2]-a[j*3+2])^2+(a[f*3+3]-a[j*3+3])^2)^0.5
	d=(d_1+d_2+d_3)/3
	count=set_effect(i,j,f,count)
	end
	if(d<saidai and d>saisyo)then
	set_alpha(d)
	sankaku(i,j,f)
	end
end
end
end
end
end



--描画失敗用--
obj.alpha=0



